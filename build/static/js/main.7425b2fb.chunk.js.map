{"version":3,"sources":["logo.svg","components/TopBar/TopBar.jsx","components/Projects/Projects.jsx","modules.jsx","components/Canvas/Modulebar.jsx","components/Canvas/Canvas2.jsx","components/ModelInfo/ModelInfo.jsx","components/TrainingHistory/TrainingHistory.jsx","components/Train/Train.jsx","components/Dashboard/Dashboard.jsx","App.js","reportWebVitals.js","index.js"],"names":["TopBar","props","className","to","style","float","padding","fontSize","this","directory","Button","color","onClick","setDirectory","React","Component","modules","module_name","block_type","layer_type","params","param_name","type","ModuleBar","blocks","i","push","onDragStart","event","node","dataTransfer","setData","effectAllowed","JSON","stringify","draggable","toString","length","Canvas","state","block_count","reactFlowInstance","onConnect","bind","onElementsRemove","onLoad","onDrop","onDragOver","onChange","onNodeDragStop","newEdge","id","source","target","saveData","modelData","nodes","edges","concat","elementsToRemove","nodesToRemove","edgesToRemove","forEach","elem","undefined","data","removeIoObjectById","filter","includes","edge","_reactFlowInstance","setState","preventDefault","parse","getData","position","project","x","clientX","y","clientY","value","newNode","getId","createIoObject","dropEffect","nodeId","paramIndex","nodesCopy","index","findIndex","renameIoObjectById","e","reactFlowElements","sourcePosition","targetPosition","label","modelOptions","listOfArchitectures","arch","href","createNewArchitecture","elements","snapGrid","currentArchitecture","changeCurrArchitecture","deleteCurrArchitecture","ModelInfo","info","metrics","trainingParams","loss_data","metrics_data","n","trainingHistory","loss","name","train","validation","val_loss","metrics_graph","Grid","item","xs","ResponsiveContainer","width","height","LineChart","CartesianGrid","strokeDasharray","XAxis","dataKey","YAxis","Tooltip","Legend","Line","stroke","container","overflowY","modelArchitecture","datetime","loss_function","learning_rate","optimizer","batch_size","epochs","val_split","removeTrainedModel","exportTrainedModel","spacing","TrainingHistory","trainingHistroyList","Train","metric_choose","doneTraining","onTrainingParamChange","prevProps","training","varName","trainingParams_copy","ioForms","options","dataObjects","ioObjects","dataset","setIoDataset","removeMetric","xl","md","sm","FormControl","variant","InputLabel","htmlFor","Select","native","size","inputProps","TextField","addMetric","trainModel","Dashboard","newDataObjectName","handleUploadData","uploadInput","files","domForm","FormData","append","axios","post","then","rerenderDataAsset","catch","err","console","log","sort","a","b","dataObjects_blocks","borderBottom","removeDataObject","onSubmit","ref","domFileRef","paddingLeft","trainingScore","hostName","App","getDataAssetList","saveModelData","getModelData","deleteAllArchitecture","getModelNodeId","getTrainingHistory","currId","smalltalk","prompt","res","get","listOfArch","alert","nameToRemove","confirm","listOfDataObjects","trainedModelName","newCurrArch","fileName","newListOfArchitectures","ioObjects_copy","newName","paramInd","updatedNodes","updatedEdges","newId","response","datasetName","newTrainingParams","newMetric","metricInd","splice","zIndex","top","path","render","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7425b2fb.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from 'react'\nimport './TopBar.css'\n\nimport {\n    Button\n  } from '@material-ui/core';\nimport {\n    Link\n} from 'react-router-dom';\n\n\nclass TopBar extends React.Component{\n    constructor(props){\n        super(props);\n    }\n\n    render(){\n        return (\n            <div className='topbar'>\n                <span className='brand'>DataFlow</span>\n                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n                <span className='navbar'>\n                    <Link className='navLink' to={'/assets'}>Dashboard</Link>{'   .   '}\n                    <Link className='navLink' to={'/model'}>Models</Link>\n                </span>\n                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n                <div style={{float:'right', padding:15, fontSize:15}}>\n                    Directory: {this.props.directory}\n                    <Button color=\"primary\" onClick={()=>this.props.setDirectory()}>Change / Create New</Button>\n                    \n                </div>\n                                \n            </div>\n        )\n    }\n}\n\nexport default TopBar","import React from 'react'\nimport './Projects.css'\n\nclass Projects extends React.Component {\n    constructor(props){\n        super(props);\n    }\n\n    render(){\n        return (\n            <div>\n            </div>\n        );\n    }\n}\n\nexport default Projects","// put python id name later\n\nlet modules = [\n    {\n        module_name: 'Input', \n        block_type: 'input',\n        layer_type: 'Input',\n        params: [\n            {\n                param_name: 'input name', \n                type: 'text' //wrong type\n            }, \n            \n            {\n                param_name: 'shape', \n                type: 'text' //wrong type\n            }, \n            \n        ]\n    },\n\n    {\n        module_name: 'Output', \n        block_type: 'output',\n        layer_type: 'Output',\n        params: [\n            {\n                param_name: 'Output Name', \n                type: 'text'\n            }, \n        ]\n    },\n\n\n    {\n        module_name: 'Reshape', \n        block_type: 'default',\n        params: [\n            {\n                param_name: 'new shape', \n                type: 'tuple'\n            }\n        ]\n    },\n\n    {\n        module_name: 'Flatten', \n        block_type: 'default',\n        params: [\n        ]\n    },\n\n    {\n        module_name: 'Concatenate', \n        block_type: 'default',\n        params: [\n            {\n                param_name: 'axis', \n                type: 'number'\n            }\n        ]\n    },\n\n\n    {\n        module_name: 'Fully Connected Layer', \n        block_type: 'default',\n        layer_type: 'Dense',\n        params: [\n            {\n                param_name: 'number of neurons', \n                type: 'number', \n            }, \n            \n            {\n                param_name: 'activation', \n                type: 'text', //should be choose option\n            }\n        ]\n    },\n    \n    {\n        module_name: '1D Convolutional Layer', \n        block_type: 'default',\n        layer_type: 'Conv1D',\n        params: [\n            {\n               param_name: 'number of filters', \n               type: 'number'\n            }, \n\n            {\n               param_name: 'kernel shape', \n               type: 'tuple'\n            }, \n\n            {\n                param_name: 'stride', \n                type: 'tuple', //should be choose option\n            },\n\n            {\n                param_name: 'padding', \n                type: 'bool', //should be choose option\n            },\n            \n            {\n                param_name: 'activation', \n                type: 'text', //should be choose option\n            }, \n        ]\n    },\n\n    {\n        module_name: '2D Convolutional Layer', \n        block_type: 'default',\n        layer_type: 'Conv2D',\n        params: [\n            {\n               param_name: 'number of filters', \n               type: 'number'\n            }, \n\n            {\n               param_name: 'kernel shape', \n               type: 'tuple'\n            }, \n\n            {\n                param_name: 'stride', \n                type: 'tuple', //should be choose option\n            },\n\n            {\n                param_name: 'padding', \n                type: 'bool', //should be choose option\n            },\n            \n            {\n                param_name: 'activation', \n                type: 'text', //should be choose option\n            }, \n        ]\n    },\n\n    {\n        module_name: '3D Convolutional Layer', \n        block_type: 'default',\n        layer_type: 'Conv3D',\n        params: [\n            {\n               param_name: 'number of filters', \n               type: 'number'\n            }, \n\n            {\n               param_name: 'kernel shape', \n               type: 'tuple'\n            }, \n\n            {\n                param_name: 'stride', \n                type: 'tuple', //should be choose option\n            },\n\n            {\n                param_name: 'padding', \n                type: 'bool', //should be choose option\n            },\n            \n            {\n                param_name: 'activation', \n                type: 'text', //should be choose option\n            }, \n        ]\n    },\n\n    {\n        module_name: '1D Maxpooling Layer', \n        block_type: 'default',\n        layer_type: 'MaxPooling1D',\n        params: [\n            {\n                param_name: 'pool shape', \n                type: 'number'\n            } , \n            \n            {\n                param_name: 'stride', \n                type: 'number', //should be choose option\n            }\n        ]\n    },\n    \n    {\n        module_name: '2D Maxpooling Layer', \n        block_type: 'default',\n        layer_type: 'MaxPooling2D',\n        params: [\n            {\n                param_name: 'pool shape', \n                type: 'tuple'\n            } , \n            \n            {\n                param_name: 'stride', \n                type: 'tuple', //should be choose option\n            }\n        ]\n    },\n\n    {\n        module_name: '3D Maxpooling Layer', \n        block_type: 'default',\n        layer_type: 'MaxPooling3D',\n        params: [\n            {\n                param_name: 'pool shape', \n                type: 'tuple'\n            } , \n            \n            {\n                param_name: 'stride', \n                type: 'tuple', //should be choose option\n            }\n        ]\n    },\n\n    {\n        module_name: 'Long short-term memory (LSTM)', \n        block_type: 'default',\n        layer_type: 'LSTM',\n        params: [\n            {\n               param_name: 'units (output dimesnion)', \n                 type: 'number'\n            }, \n            \n            {\n                param_name: 'activation', \n                type: 'text', \n            }, \n\n            {\n                param_name: 'use_bias',\n                type: 'bool'\n            },\n            {\n                param_name: 'return_sequences',\n                type: 'bool'\n            }\n        ]\n    },\n\n\n    {\n        module_name: 'Dropout',\n        block_type: 'default',\n        params:[\n            {\n                param_name: 'Dropout probability',\n                type: 'number',\n            },\n\n        ]\n    },\n\n\n    {\n        module_name: 'Maxpooling Layer', \n        block_type: 'default',\n        layer_type: 'MaxPooling2D',\n        params: [\n            {\n                param_name: 'pool shape', \n                type: 'tuple'\n            }, \n            \n            {\n                param_name: 'stride', \n                type: 'tuple', //should be choose option\n            }\n        ]\n    },\n\n\n    {\n        module_name: 'Recurrent Layer', \n        block_type: 'default',\n        layer_type: 'RNN',\n        params: [\n            {\n                param_name: 'number of neurons', \n                type: 'number'\n            }, \n            \n            {\n                param_name: 'activation', \n                type: 'text', //should be choose option\n            }\n        ]\n    },\n]\n\nexport default modules\n","import React, { DragEvent } from 'react';\n// import modules from '../../modules'\nconst onDragStart = (event, node) => {\n  event.dataTransfer.setData('application/reactflow', node);\n  event.dataTransfer.effectAllowed = 'move';\n};\n\nconst ModuleBar = (props) => {\n  const modules = props.modules;\n  let blocks = [];\n  for (let i = 0; i < modules.length; i++){\n    blocks.push(\n      <div key={i.toString()} className={\"react-flow__node-\" + modules[i].block_type} onDragStart={(event) => onDragStart(event, JSON.stringify(modules[i]))} draggable>\n        {modules[i].module_name}\n      </div>\n    );\n  }\n  return (\n    <aside className='sidebar'>\n      {blocks}\n    </aside>\n  );\n};\n\nexport default ModuleBar;\n","import React, { useState, DragEvent } from 'react';\nimport ReactFlow, {\n  Background,\n  ReactFlowProvider,\n  Controls,\n  MiniMap\n} from 'react-flow-renderer';\n\nimport modules from '../../modules'\n\nimport ModuleBar from './Modulebar';\n\nimport './dnd.css';\n\n// let id = 0;\n// const getId = () => `dndnode_${id++}`;\n\nclass Canvas extends React.Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            block_count: 0,\n            reactFlowInstance: null,\n\n        }\n        // this.getId = this.getId.bind(this);\n        this.onConnect = this.onConnect.bind(this);\n        this.onElementsRemove = this.onElementsRemove.bind(this);\n        this.onLoad = this.onLoad.bind(this);\n        this.onDrop = this.onDrop.bind(this);\n        this.onDragOver = this.onDragOver.bind(this);\n        this.onChange = this.onChange.bind(this);\n        this.onNodeDragStop = this.onNodeDragStop.bind(this);\n    }\n\n    componentDidMount() {\n    }\n\n    // componentDidUpdate(prevProps){\n    //     if (prevProps !== this.props){\n            \n    //     }\n    // }\n    \n    // getId(){\n    //     this.setState({block_count: this.state.block_count + 1})\n    //     return 'node_'+this.state.block_count;\n    // }\n\n    onConnect(params){\n        let newEdge = params;\n        newEdge.id = 'edge-' + params.source + '-' + params.target;\n        this.props.saveData(this.props.modelData.nodes, this.props.modelData.edges.concat([newEdge]));\n    }\n\n    onElementsRemove(elementsToRemove){\n        let nodesToRemove = [];\n        let edgesToRemove = [];\n        elementsToRemove.forEach((elem) => {\n            if (elem.data !== undefined){\n                // it is a node\n                nodesToRemove.push(elem.id);\n                // remove IO object if applicable, function will do nothing if it is not an IO node\n                this.props.removeIoObjectById(elem.id);\n                \n            }else {\n                // it is an edge\n                edgesToRemove.push(elem.id);\n            }\n        });\n        this.props.saveData(this.props.modelData.nodes.filter(node => !nodesToRemove.includes(node.id)), \n                            this.props.modelData.edges.filter(edge => !edgesToRemove.includes(edge.id)));\n        \n    }\n\n    onLoad(_reactFlowInstance){\n        this.setState({reactFlowInstance: _reactFlowInstance});\n    }\n\n    onDrop(event){\n        event.preventDefault();\n        if (this.state.reactFlowInstance) {\n          const node = JSON.parse(event.dataTransfer.getData('application/reactflow'));\n          const position = this.state.reactFlowInstance.project({ x: event.clientX-300, y: event.clientY-70 });\n    \n          for (let i = 0; i < node.params.length; i++){\n              node.params[i].value = '';\n          }\n\n          let nodeId = this.props.getId();\n          let newNode= {\n            id: nodeId,\n            position,\n            data: node,\n          };\n\n          this.props.saveData(this.props.modelData.nodes.concat([newNode]), this.props.modelData.edges);\n\n          // add to input / output objects if applicable\n          if (this.props.createIoObject && (node.module_name === 'Input' || node.module_name === 'Output')){\n              this.props.createIoObject(newNode);\n          }\n        }\n    }\n    \n    onDragOver(event){\n        event.preventDefault();\n        event.dataTransfer.dropEffect = 'move';\n    }\n\n    onChange(nodeId, paramIndex, value){\n        let nodesCopy = [...this.props.modelData.nodes];\n        let index = nodesCopy.findIndex(x => x.id === nodeId);\n        nodesCopy[index].data.params[paramIndex].value = value; // check exists?\n        this.props.saveData(nodesCopy, this.props.modelData.edges);\n\n        // rename IO object if applicable, do nothing if not applicable, edit later\n        this.props.renameIoObjectById(nodeId, value, paramIndex);\n    }\n\n    onNodeDragStop(e, node){\n        let nodesCopy = [...this.props.modelData.nodes];\n        let index = nodesCopy.findIndex(x => x.id === node.id);\n        nodesCopy[index].position = node.position // check exists?\n        this.props.saveData(nodesCopy, this.props.modelData.edges);\n    }\n\n\n\n    render(){\n        // console.log(this.props.modelData)\n\n        // turn object into react-flow elements\n        let reactFlowElements = [];\n        for (let i = 0; i < this.props.modelData.nodes.length; i++){\n            let node = this.props.modelData.nodes[i]\n            let params = [];\n            for (let i = 0; i < node.data.params.length; i++){\n                params.push(\n                    <div key={i.toString()}>\n                        {node.data.params[i].param_name} <br />\n                        <input id = {node.id + '-param-' + i.toString()} type='text' \n                            value = {node.data.params[i].value} onChange={(e)=>this.onChange(node.id, i, e.target.value)}/>\n                        <br /><br />\n                    </div>\n                )\n            }\n            let elem = {\n                id: node.id, \n                position: node.position, \n                sourcePosition: 'right',\n                targetPosition: 'left',\n                type: node.data.block_type,\n                data: {label: (\n                    <div id = {node.id}>\n                        <h3>{node.data.module_name}</h3>\n                        {params}\n                    </div>\n                )}\n            }\n            reactFlowElements.push(elem);\n        }\n        for (let i = 0; i < this.props.modelData.edges.length; i++){\n            reactFlowElements.push(this.props.modelData.edges[i]);\n        }\n        let modelOptions = [];\n        for (let i = 0; i < this.props.listOfArchitectures.length; i++){\n            let arch = this.props.listOfArchitectures[i];\n            modelOptions.push(<option value={arch}>{arch}</option>)\n        }\n\n        return (\n            <div className='canvasContainer'>\n                {this.props.listOfArchitectures.length === 0 ? \n                            <div style={{fontSize:'60px', color:'#555'}}> \n                                <br />\n                                <center>No Models Created Yet<br /><a href='/#/model' onClick={this.props.createNewArchitecture}>+ Create New Model</a></center>\n                            </div> \n                            \n                            :\n\n\n                <div className=\"dndflow\">\n                    <ReactFlowProvider>\n                    <ModuleBar modules={modules}/>\n                    \n                    <div className=\"reactflow-wrapper\">\n                        <ReactFlow\n                        elements={reactFlowElements}\n                        onConnect={this.onConnect}\n                        onElementsRemove={this.onElementsRemove}\n                        onLoad={this.onLoad}\n                        onDrop={this.onDrop}\n                        onDragOver={this.onDragOver}\n                        onNodeDragStop={this.onNodeDragStop}\n                        // snapToGrid={true}\n                        snapGrid={[15, 15]}\n                        >\n                        <div className='toolBarWrapper'>\n                            <div className='toolBar'>\n                                model: {' '}\n                                <select value={this.props.currentArchitecture}  onChange={e=>this.props.changeCurrArchitecture(e.target.value)}>\n                                    {modelOptions}\n                                </select>\n                                {'  '}\n                                <input type='button' onClick={this.props.deleteCurrArchitecture} value='Detele' />\n                                {' '}\n                                <input type='button' onClick={this.props.createNewArchitecture} value='+ New' />\n                            </div>\n                        </div>\n                     \n                        <Controls />\n                        <Background />\n                        </ReactFlow>\n\n                    </div>\n                    </ReactFlowProvider>\n                </div>}\n            </div>\n        );\n    }\n}\n\nexport default Canvas;","import React from 'react'\nimport './ModelInfo.css'\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\n\n\nimport {\n    Grid, Button//, Typography, Paper\n  } from '@material-ui/core';\nimport {\nLink\n} from 'react-router-dom';\n\n\nclass ModelInfo extends React.Component{\n    constructor(props){\n        super(props);\n    }\n\n    componentDidMount(){\n\n    }\n\n\n    render(){\n        let info = this.props.info;\n        let metrics = this.props.info.trainingParams.metrics;\n        let loss_data = [];\n        let metrics_data = [];\n        for (let n = 0; n < metrics.length; n++) metrics_data.push([]);\n\n        for (let i = 0; i < info.trainingHistory.loss.length; i++){\n            // acc_data.push(\n            //     {\n            //         name: 'epoch ' + (i+1), \n            //         train: info.trainingHistory.accuracy[i], \n            //         validation: info.trainingHistory.val_accuracy[i], \n            //     }\n            // );\n            loss_data.push(\n                {\n                    name: 'epoch ' + (i+1), \n                    train: info.trainingHistory.loss[i], \n                    validation: info.trainingHistory.val_loss[i], \n                }\n            )\n\n            for (let n = 0; n < metrics.length; n++){\n                metrics_data[n].push({\n                    name: 'epoch ' + (i+1), \n                    train: info.trainingHistory[metrics[n]][i],\n                    validation: info.trainingHistory['val_'+metrics[n]][i],\n                })\n            }\n        }\n\n        let metrics_graph = []\n        for (let n = 0; n < metrics.length; n++){\n            metrics_graph.push(\n                <Grid item xs={6}>\n                    <center>{metrics[n]}</center>\n                    <ResponsiveContainer width={'100%'} height={300}>\n                        <LineChart\n                        data={metrics_data[n]}\n                        >\n                        <CartesianGrid strokeDasharray=\"3 3\" />\n                        <XAxis dataKey=\"name\" />\n                        <YAxis />\n                        <Tooltip />\n                        <Legend />\n                        <Line type=\"monotone\" dataKey=\"train\" stroke=\"#8884d8\" />\n                        <Line type=\"monotone\" dataKey=\"validation\" stroke=\"#82ca9d\" />\n                        </LineChart>\n                    </ResponsiveContainer>\n                </Grid>\n            )\n        }\n\n\n          \n        return (\n            <div className='trainedModelInfoContainer'>\n                <Grid container>\n                    <Grid item xs={3}>\n                        <div style={{height: '280px', overflowY:'scroll'}}>\n                            Model Architecture: <br /><b>{info.modelArchitecture}</b> <br /><br />\n                            Train Datetime: <br /><b>{info.datetime}</b> <br /><br />\n                            Training Parameters:<br />\n                            &nbsp;<small>Loss Function: <b>{info.trainingParams.loss_function}</b></small> <br/>\n                            &nbsp;<small>Learning Rate: <b>{info.trainingParams.learning_rate}</b></small> <br/>\n                            &nbsp;<small>Optimizer: <b>{info.trainingParams.optimizer}</b></small> <br/>\n                            &nbsp;<small>Batch Size: <b>{info.trainingParams.batch_size}</b></small> <br/>\n                            &nbsp;<small>Epoch: <b>{info.trainingParams.epochs}</b></small> <br/>\n                            &nbsp;<small>Validation Split: <b>{info.trainingParams.val_split}</b></small>\n                            {/* <br />\n                            <Button onClick={()=>this.props.removeTrainedModel(info.name)}>Remove</Button>\n                            <Button onClick={()=>this.props.exportTrainedModel(info.name)}>Export</Button> */}\n                        </div>\n                        <Button onClick={()=>this.props.removeTrainedModel(info.name)}>Remove</Button>\n                        <Button onClick={()=>this.props.exportTrainedModel(info.name)}>Export</Button>\n                    </Grid>\n\n                    <Grid item xs={9}>\n                        <Grid container spacing={0}>\n                            <Grid item xs={6}>\n                                <center>Loss ({this.props.info.trainingParams.loss_function})</center>\n                                <ResponsiveContainer width={'100%'} height={300}>\n                                    <LineChart\n                                    data={loss_data}\n                                    >\n                                    <CartesianGrid strokeDasharray=\"3 3\" />\n                                    <XAxis dataKey=\"name\" />\n                                    <YAxis />\n                                    <Tooltip />\n                                    <Legend />\n                                    <Line type=\"monotone\" dataKey=\"train\" stroke=\"#8884d8\" />\n                                    <Line type=\"monotone\" dataKey=\"validation\" stroke=\"#82ca9d\" />\n                                    </LineChart>\n                                </ResponsiveContainer>\n                            </Grid>\n\n                            {metrics_graph}\n                        </Grid>\n                    </Grid>\n                </Grid>\n            </div>\n        );\n    }\n}\nexport default ModelInfo;","import React from 'react'\nimport './TrainingHistory.css'\nimport axios from 'axios';\n\nimport {\n    Grid//, Typography, Paper\n  } from '@material-ui/core';\nimport {\nLink\n} from 'react-router-dom';\n\nimport ModelInfo from '../ModelInfo/ModelInfo'\n\nconst hostName = 'http://127.0.0.1:5000/';\n\n\nclass TrainingHistory extends React.Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            trainingHistory: [],\n        }\n    }\n\n    componentDidMount(){\n    }\n\n\n\n    render(){\n\n        let trainingHistroyList = [];\n        if (this.props.trainingHistory){\n            for (let i = 0; i < this.props.trainingHistory.length; i++){\n                trainingHistroyList.push(\n                    <div key={i}>\n                        <ModelInfo \n                            info={this.props.trainingHistory[i]} \n                            removeTrainedModel={this.props.removeTrainedModel} \n                            exportTrainedModel={this.props.exportTrainedModel}/>\n                        <br />\n                    </div>\n                )\n            }\n        }\n        return (\n            <div className='trainingPlots'>\n                <div style={{fontSize:30}}>Training History</div>\n                <hr />\n                {trainingHistroyList.length===0 ? <div className='nullTitle'>No Trained Models Yet</div>: trainingHistroyList}\n            </div>\n        );\n    }\n}\nexport default TrainingHistory;","import React from 'react'\nimport './Train.css'\nimport axios from 'axios';\n\nimport {\n    Grid, Button, TextField, InputLabel, Select, FormControl\n  } from '@material-ui/core';\nimport {\nLink\n} from 'react-router-dom';\n\nimport ModelInfo from '../ModelInfo/ModelInfo'\n\nconst hostName = 'http://127.0.0.1:5000/';\n\n\nclass Train extends React.Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            trainingHistory: [],\n            metric_choose: 'none',\n            doneTraining:false\n        }\n        this.onTrainingParamChange = this.onTrainingParamChange.bind(this);\n    }\n\n    componentDidMount(){\n    }\n\n    componentDidUpdate(prevProps){\n        if (prevProps.training===true && this.props.training===false){\n            this.setState({doneTraining:true});\n        }else if(prevProps.training===false && this.props.training===true){\n            this.setState({doneTraining:false});\n        }\n    }\n\n    onTrainingParamChange(varName, value){\n        let trainingParams_copy = {...this.props.trainingParams};\n        trainingParams_copy[varName] = value;\n        this.props.onTrainingParamChange(trainingParams_copy);\n    }\n\n\n\n    render(){\n        let ioForms = []\n        let options = [];\n        let dataObjects = this.props.dataObjects;\n        for (let i = 0; i < dataObjects.length; i++){\n            options.push(<option value={dataObjects[i].name}>{dataObjects[i].name}</option>)\n        }\n        let ioObjects = this.props.ioObjects;\n        for (const id in ioObjects){\n            ioForms.push(\n                <Grid item xs={12}>\n                    <select value={ioObjects[id].dataset} onChange={(e)=>this.props.setIoDataset(id, e.target.value)}>\n                        <option value=''>(None)</option>\n                        {options}\n                    </select>\n                    {'  -->  ' + ioObjects[id].name}\n                </Grid>\n            )\n        }\n\n        // let trainingHistroyList = [];\n        // if (this.props.trainingHistory){\n        //     for (let i = 0; i < this.props.trainingHistory.length; i++){\n        //         trainingHistroyList.push(\n        //             <div key={i}>\n        //                 <ModelInfo info={this.props.trainingHistory[i]} removeTrainedModel={this.props.removeTrainedModel} />\n        //                 <br />\n        //             </div>\n        //         )\n        //     }\n        // }\n        let metrics = [];\n        for (let i = 0; i <  this.props.trainingParams.metrics.length; i++){\n            metrics.push(\n                <span key={i} onClick={()=>this.props.removeMetric(i)} style={{color:'grey', fontSize:12}}>{'(x) '+this.props.trainingParams.metrics[i]} &nbsp; &nbsp; &nbsp;</span>\n            )\n        }\n       \n        let modelOptions = [];\n        for (let i = 0; i < this.props.listOfArchitectures.length; i++){\n            let arch = this.props.listOfArchitectures[i];\n            modelOptions.push(<option value={arch}>{arch}</option>)\n        }\n\n        return (\n            <div>\n                <div className='shadowBox'>\n                    <div style={{fontSize:'20px'}}>\n                        Model Architecture: {' '}\n                        <select value={this.props.currentArchitecture}  onChange={e=>this.props.changeCurrArchitecture(e.target.value)}>\n                            {modelOptions}\n                        </select>\n                    </div>\n                    <h3>Training Parameters</h3>\n                    <Grid container spacing={4}>\n                            <Grid item xl={2} md={4} sm={6} xs={12}>\n\n                                {/* Loss Function <br /> */}\n                                <FormControl variant=\"outlined\">\n                                    <InputLabel htmlFor=\"loss-function\">Loss Function</InputLabel>\n                                    <Select\n                                        native\n                                        size=\"small\"\n                                        value={this.props.trainingParams.loss_function} \n                                        onChange={e=>this.onTrainingParamChange('loss_function', e.target.value)}\n                                        label=\"Loss Function\"\n                                        inputProps={{\n                                            name: 'loss-function',\n                                            id: 'loss-function',\n                                        }}\n                                    >\n                                        <option value=\"mean_squared_error\">mean squared error</option>\n                                        <option value=\"categorical_crossentropy\">categorical crossentropy</option>\n                                        <option value=\"binary_crossentropy\">binary crossentropy</option>\n                                    </Select>\n                                </FormControl>\n                                {/* <select value={this.props.trainingParams.loss_function} onChange={e=>this.onTrainingParamChange('loss_function', e.target.value)}>\n                                    <option value=\"mean_squared_error\">mean squared error</option>\n                                    <option value=\"categorical_crossentropy\">categorical crossentropy</option>\n                                    <option value=\"binary_crossentropy\">binary crossentropy</option>\n                                </select> */}\n                            \n                            </Grid>\n                            <Grid item xl={2} md={4} sm={6} xs={12}>\n\n                                <TextField id=\"standard-basic\" label='Learning Rate' size=\"small\" value={this.props.trainingParams.learning_rate} onChange={e=>this.onTrainingParamChange('learning_rate', e.target.value)}/>\n                            </Grid>\n                            <Grid item xl={2} md={4} sm={6} xs={12}>\n                                <FormControl variant=\"outlined\">\n                                    <InputLabel htmlFor=\"optimizer\">Optimizer</InputLabel>\n                                    <Select\n                                        native\n                                        size=\"small\"\n                                        value={this.props.trainingParams.optimizer} \n                                        onChange={e=>this.onTrainingParamChange('optimizer', e.target.value)}\n                                        label=\"optimizer\"\n                                        inputProps={{\n                                            name: 'optimizer',\n                                            id: 'optimizer',\n                                        }}\n                                    >\n                                        <option value=\"Adam\">Adam</option>\n                                        <option value=\"SGD\">SGD</option>\n                                        <option value=\"Adagrad\">Adagrad</option>\n                                    </Select>\n                                </FormControl>\n                            </Grid>\n                            <Grid item xl={2} md={4} sm={6} xs={12}>\n                                <TextField id=\"standard-basic\" label='Batch Size' size=\"small\" value={this.props.trainingParams.batch_size} onChange={e=>this.onTrainingParamChange('batch_size', e.target.value)}/>\n                            </Grid>\n\n                            <Grid item xl={2} md={4} sm={6} xs={12}>\n                                <TextField id=\"standard-basic\" label='Epochs' size=\"small\" value={this.props.trainingParams.epochs} onChange={e=>this.onTrainingParamChange('epochs', e.target.value)}/>\n                            </Grid>\n\n                            <Grid item xl={2} md={4} sm={6} xs={12}>\n                                <TextField id=\"standard-basic\" label='Validation Split' width='100%' size=\"small\" value={this.props.trainingParams.val_split} onChange={e=>this.onTrainingParamChange('val_split', e.target.value)} />\n                            \n                            </Grid>\n                            <Grid item xs={8}>\n                                <FormControl variant=\"outlined\">\n                                    <InputLabel htmlFor=\"metrics\">Metrics</InputLabel>\n                                    <Select\n                                        native\n                                        size=\"small\"\n                                        value={this.state.metric_choose} \n                                        onChange={e=>this.setState({metric_choose: e.target.value})}\n                                        label=\"metrics\"\n                                        inputProps={{\n                                            name: 'metrics',\n                                            id: 'metrics',\n                                        }}\n                                    >\n                                        <option value='none'>(None)</option>\n                                        <option value='accuracy'>accuracy</option>\n                                        <option value='mean_squared_error'>mean square error</option>\n                                    </Select>\n                                \n                                {/* Metrics <br />\n                                <select value={this.state.metric_choose} onChange={e=>this.setState({metric_choose: e.target.value})}>\n                                    <option value='none'>(None)</option>\n                                    <option value='accuracy'>accuracy</option>\n                                    <option value='mean_squared_error'>mean square error</option>\n                                </select> {'  '} */}\n                                </FormControl>\n                                <Button onClick={()=>this.props.addMetric(this.state.metric_choose)}>Add</Button>\n                                {/* <input type='button' value='Add' onClick={()=>this.props.addMetric(this.state.metric_choose)}/> */}\n                                {' '} {metrics}\n                            </Grid>\n                    </Grid>\n                \n                    <h3>Training Data</h3>\n                    {ioForms.length !== 0 ? <Grid container spacing={0}>{ioForms}</Grid> : 'No input node or output node created yet. '}\n                    <br />\n                    <Button variant=\"outlined\" onClick={() => this.props.trainModel()}>Train Model</Button>\n                    {this.props.training? '\\ntraining ...' : ''}\n                    {this.state.doneTraining? <span style={{color:'green'}}>{' '}Training Finished!</span> : ''}\n                    \n                </div>\n                \n            </div>\n        );\n    }\n}\nexport default Train;","import React from 'react'\nimport './Dashboard.css'\nimport axios from 'axios'\n// import Canvas from '../Canvas/Canvas';\n\n// import dataPreprocessingModules from './dataPreprocessingModules'\n\nimport TrainingHistory from '../TrainingHistory/TrainingHistory';\nimport Train from '../Train/Train';\n\n\nimport {\n    Grid, Button,\n  } from '@material-ui/core';\nimport {\nLink\n} from 'react-router-dom';\n\nclass Dashboard extends React.Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            newDataObjectName: '',\n        };\n\n        this.handleUploadData = this.handleUploadData.bind(this);\n        this.onChange = this.onChange.bind(this);\n        \n    }\n\n    handleUploadData(e) {\n        e.preventDefault();\n        if (this.uploadInput.files.length > 0) {\n    \n         // Create a DOM form and add the file to it under the name uploadedphoto\n         const domForm = new FormData();\n         domForm.append('file', this.uploadInput.files[0]);\n         domForm.append('name', this.state.newDataObjectName);\n        //  domForm.append('filename', 'test.jpeg');\n         axios.post('http://127.0.0.1:5000/uploadData', domForm)\n           .then(() => {\n                this.props.rerenderDataAsset();\n           })\n           .catch(err => console.log(`POST ERR: ${err}`));\n        }\n    }\n\n    onChange(e){\n        this.setState({newDataObjectName: e.target.value})\n    }\n\n    render(){\n        let dataObjects = [... this.props.dataObjects]\n        dataObjects.sort((a, b)=>{\n            if (a.datetime < b.datetime) return 1\n            if (a.datetime > b.datetime) return -1\n            return 0\n        });\n        let dataObjects_blocks = []\n        for (let i = 0; i < dataObjects.length; i++){\n            dataObjects_blocks.push(\n                <div key = {i}>\n                    <br />\n                    <div className='dataAsset dataObject'>\n                        <div style={{fontSize:20, borderBottom: '0.5px solid grey'}}>{dataObjects[i].name}</div>\n                        Create at: {dataObjects[i].datetime}\n                        <br />\n                        <Button size=\"small\" onClick={()=>this.props.removeDataObject(dataObjects[i].name)} >Remove</Button>\n                    </div>\n                </div>\n            )\n        }\n\n\n        return (\n            <div className='dashboardPage'>\n                <div className='datasetSection'>\n                    <div className='topSection'>\n                        <span style={{fontSize:20}}>Upload Data</span>\n                        <form onSubmit={this.handleUploadData}>\n                            <table>\n                                <tr>\n                                    <td>Name</td>\n                                    <td><input type=\"text\" value={this.state.newDataObjectName} onChange={this.onChange} /></td>\n                                </tr>\n                                <tr>\n                                    <td>Type</td>\n                                    <td>\n                                        <select>\n                                            <option>Numpy Array (.npy)</option>\n                                        </select>\n                                    </td>\n                                </tr>\n                                <tr>\n                                    <td>source</td>\n                                    <td><input type=\"file\"  ref={(domFileRef) => { this.uploadInput = domFileRef; }} /></td>\n                                </tr>\n                                <tr>\n                                    <td> </td>\n                                    <td><input value='upload' type='submit' /></td>\n                                </tr>\n                            </table>\n                        </form>\n                    </div>\n                    <br />\n                    <div style={{fontSize:20, paddingLeft:10, borderBottom:'0.5px solid black'}}>Data Assets</div>\n                    {/* <hr /> */}\n                    <div className='bottomSection'>\n                        {dataObjects_blocks.length === 0 ? <div><br /><br />No Data Assets uploaded yet</div> : dataObjects_blocks}\n                    </div>\n                </div>\n                <div className='trainingHistoryContainer'>\n                    <div className='trainingHistoryWrapper'>\n                        <Train  trainingParams={this.props.trainingParams} \n                            dataObjects={this.props.dataObjects} \n                            ioObjects={this.props.ioObjects} \n                            currentArchitecture={this.props.currentArchitecture}\n                            setIoDataset={this.props.setIoDataset}\n                            onTrainingParamChange = {this.props.onTrainingParamChange} \n                            trainModel = {this.props.trainModel}\n                            trainingScore={this.props.trainingScore}\n                            trainingHistory={this.props.trainingHistory}\n                            training={this.props.training}\n                            removeTrainedModel={this.props.removeTrainedModel}\n                            addMetric = {this.props.addMetric}\n                            removeMetric = {this.props.removeMetric}\n                            changeCurrArchitecture = {this.props.changeCurrArchitecture}\n                            listOfArchitectures = {this.props.listOfArchitectures}\n                        />\n                        <br/>\n                        <TrainingHistory \n                                trainingHistory={this.props.trainingHistory}\n                                removeTrainedModel={this.props.removeTrainedModel}\n                                exportTrainedModel={this.props.exportTrainedModel}\n                        />\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Dashboard;\n","import logo from './logo.svg';\nimport './App.css';\nimport axios from 'axios';\nimport {\n  HashRouter, Route, Switch, Redirect, Link\n} from 'react-router-dom';\n// import { io } from \"socket.io-client\";\n\nimport smalltalk from 'smalltalk';\n\n\nimport TopBar from './components/TopBar/TopBar';\nimport Projects from './components/Projects/Projects';\nimport Canvas from './components/Canvas/Canvas2';\n// import Train from './components/Train/Train';\nimport Dashboard from './components/Dashboard/Dashboard';\nimport React from 'react';\n// import Deploy from './components/Deploy/Deploy';\n\n// const socket = io(\"https://server-domain.com\");\nconst hostName = 'http://127.0.0.1:5000/';\n\nclass App extends React.Component{\n  constructor(props){\n    super(props);\n\n    this.setDirectory = this.setDirectory.bind(this);\n\n\n    // Dataset\n    this.removeDataObject = this.removeDataObject.bind(this);\n    this.getDataAssetList = this.getDataAssetList.bind(this);\n  \n    // Model\n    this.saveModelData = this.saveModelData.bind(this);\n    this.getModelData = this.getModelData.bind(this);\n    this.createIoObject = this.createIoObject.bind(this);\n    this.removeIoObjectById = this.removeIoObjectById.bind(this);\n    this.renameIoObjectById = this.renameIoObjectById.bind(this);\n    this.setIoDataset = this.setIoDataset.bind(this);\n    this.changeCurrArchitecture = this.changeCurrArchitecture.bind(this);\n    this.deleteAllArchitecture = this.deleteAllArchitecture.bind(this);\n    this.createNewArchitecture = this.createNewArchitecture.bind(this);\n    this.deleteCurrArchitecture = this.deleteCurrArchitecture.bind(this);\n    this.getModelNodeId = this.getModelNodeId.bind(this);\n    this.exportTrainedModel = this.exportTrainedModel.bind(this);\n\n    // Train\n    this.onTrainingParamChange = this.onTrainingParamChange.bind(this);\n    this.trainModel = this.trainModel.bind(this);\n    this.getTrainingHistory = this.getTrainingHistory.bind(this);\n    this.getDataAssetList = this.getDataAssetList.bind(this);\n    this.removeDataObject = this.removeDataObject.bind(this);\n    this.removeTrainedModel = this.removeTrainedModel.bind(this);\n    this.addMetric = this.addMetric.bind(this);\n    this.removeMetric = this.removeMetric.bind(this);\n\n    this.state = {\n\n      directory: '',\n\n      modelData: {\n        currId: 0,\n        nodes:[],\n        edges:[]\n      },\n      trainingParams: {\n        loss_function: 'categorical_crossentropy', \n        learning_rate: '0.0001', \n        optimizer: 'Adam', \n        batch_size: '128', \n        epochs: '4', \n        val_split: '0.2',\n        metrics: []\n      }, \n\n      listOfArchitectures:[],\n      currentArchitecture: '',\n      \n      ioObjects:{\n          // id: {\n          //   id: 1, \n          //   name: '', \n          //   dataset: '', \n          // }\n\n      },\n\n      dataObjects: [\n        // //for easy testing, edit later\n        //   {\n        //       name: 'handwritten_digits', \n        //       source: 'mnist_x_train.npy', \n        //   }, \n\n        //   {\n        //     name: 'digit_class_labels', \n        //     source: 'mnist_y_train.npy', \n        //   }\n      ],\n\n      trainingHistory: [],\n\n      training:false,\n\n      // id_count:0,\n      // currentTrainingLog: {\n      //   training_acc: [],\n      //   training_loss: [],\n      //   validation_acc: [],\n      //   validation_loss: [],\n      // },\n      trainingHistory:[],\n    };\n\n  }\n\n  componentDidMount(){\n    this.setDirectory();\n  }\n\n\n  setDirectory(){\n\n    smalltalk\n    .prompt('Select or create project', 'input project directory', '')\n    .then((directory) => {\n\n      \n      axios.post(hostName + 'changeProject', {directory: directory}).then(res =>{\n        this.setState({directory:res.data});\n        //models\n        axios.get(hostName + 'listModelArchitectures').then((listOfArch)=>{\n          \n          if (listOfArch.data.length > 0){\n            this.setState({listOfArchitectures: listOfArch.data, currentArchitecture:listOfArch.data[0]});\n            axios.get(hostName + 'getModelArchitecture/' + listOfArch.data[0]).then((arch) => {\n              this.setState({modelData: arch.data, ioObjects:{}});\n              for (let i = 0; i < arch.data.nodes.length; i++){\n                let node = arch.data.nodes[i]\n                if (node.data.module_name === 'Input' || node.data.module_name === 'Output'){\n                  this.createIoObject(node);\n                }\n              }\n            }).catch(err=>{smalltalk.alert('ERROR:', err)});\n          }\n        }).catch(err=>{smalltalk.alert('ERROR:', err)});\n        this.getTrainingHistory();\n        this.getDataAssetList();\n      }).catch(err=>smalltalk.alert(err));\n\n    })\n    .catch(() => {\n        console.log('cancel');\n    });\n  }\n\n  // ========== Dataset Function (Start) ===========\n\n\n  removeDataObject(nameToRemove){\n\n    smalltalk\n    .confirm('Remove Data Object', 'Are you sure?')\n    .then(() => {\n      axios.post(hostName + 'deleteDataObjects/' + nameToRemove).then((res)=>{\n        if (res.data === 'remove success'){\n          this.setState({dataObjects: this.state.dataObjects.filter(x => x.name !== nameToRemove)});\n        }\n      }).catch((err) => {\n        smalltalk.alert('remove unsuccessful. \\n' + err)\n      });\n    })\n    .catch(() => {\n        console.log('no');\n    });\n  }\n\n  getDataAssetList(){\n    axios.get(hostName + 'listDataObjects').then((listOfDataObjects)=>{\n      this.setState({dataObjects: listOfDataObjects.data});\n    }).catch(err=>{smalltalk.alert('ERROR:', err)});\n  }\n\n\n\n ////---\n  exportTrainedModel(trainedModelName){\n    let directory = prompt('specify a directory');\n\n    smalltalk\n    .prompt('Export Location', 'specify a directory', '')\n    .then((directory) => {\n      axios.post(hostName+'exportModel/'+trainedModelName, {directory:directory}).then((res)=>{\n        smalltalk.alert('export successful');\n      }).catch((err)=>{\n        smalltalk.alert('export unsucessful');\n      })\n    })\n    .catch(() => {\n        console.log('cancel');\n    });\n  }\n\n\n\n\n\n\n  // ------------ Dataset Function (End) -------------\n\n\n  // ========== Model Function (Start) ===========\n  getModelNodeId(){\n    // incrementing id will be handled in saveModel\n    return 'dndnode_'+this.state.modelData.currId;\n  }\n\n  changeCurrArchitecture(newCurrArch){\n    this.setState({currentArchitecture:newCurrArch});\n    axios.get(hostName + 'getModelArchitecture/' + newCurrArch).then((arch) => {\n      this.setState({modelData: arch.data, ioObjects:{}});\n      for (let i = 0; i < arch.data.nodes.length; i++){\n        let node = arch.data.nodes[i]\n        if (node.data.module_name === 'Input' || node.data.module_name === 'Output'){\n          this.createIoObject(node);\n        }\n      }\n    }).catch(err=>{smalltalk.alert('ERROR:', err.toString())});;\n  }\n\n  deleteAllArchitecture(){\n    this.setState({\n      currentArchitecture:'',\n      modelData: {\n        currId: 0,\n        nodes:[],\n        edges:[]\n      }, \n      ioObjects:{}});\n  }\n\n  createNewArchitecture(){\n    \n    smalltalk\n      .prompt('Create Model Architecture', 'name your model', '')\n      .then((fileName) => {\n        if (fileName){\n          this.setState({\n            modelData: {currId: 0, nodes:[], edges: []}, \n            currentArchitecture: fileName,\n            listOfArchitectures: this.state.listOfArchitectures.concat(fileName),\n          });\n          axios.post(hostName + 'saveModelArchitecture/' + fileName, {\n            modelData: JSON.stringify({currId: 0, nodes:[], edges: []}),\n          });\n          \n        }else{\n          smalltalk.alert('Invalid name! Try again');\n        }\n      })\n      .catch(() => {\n          console.log('cancel');\n      });\n\n  }\n\n  deleteCurrArchitecture(){\n    smalltalk\n      .confirm('Delete Model Architecture', 'Are you sure?')\n      .then(() => {\n        let fileName = this.state.currentArchitecture;\n        axios.post(hostName + 'deleteModelArchitecture/' + fileName).then((res, err)=>{\n          if(err){\n            console.log(err)\n          }\n          let newListOfArchitectures = this.state.listOfArchitectures.filter(arch => arch !== fileName)\n          if (newListOfArchitectures.length > 0){\n            this.changeCurrArchitecture(newListOfArchitectures[0]);\n          }else{\n            this.deleteAllArchitecture();\n          }\n          this.setState({\n            listOfArchitectures: newListOfArchitectures,\n          });\n          smalltalk.alert(fileName + ' deleted.')\n        }).catch((err)=>{\n          // smalltalk.alert('Error: '+ err)\n          console.log(err)\n        });\n      })\n      .catch(() => {\n          // console.log('no');\n      });\n \n  }\n\n  createIoObject(node){\n    let ioObjects_copy = {...this.state.ioObjects};\n    ioObjects_copy[node.id] = {\n      name: node.data.params[0].value, //name\n      type: node.data.module_name === 'Input' ? 'input':'output',\n      dataset: '',\n    };\n    this.setState({ioObjects: ioObjects_copy});\n  }\n\n  removeIoObjectById(nodeId){\n    let ioObjects_copy = {...this.state.ioObjects};\n    if (ioObjects_copy[nodeId]){\n      delete ioObjects_copy[nodeId];\n    }\n    this.setState({ioObjects: ioObjects_copy});\n  }\n\n  renameIoObjectById(nodeId, newName, paramInd){ // very messy, edit\n    if (this.state.ioObjects[nodeId] && paramInd === 0){ /// EDIT!!\n      let ioObjects_copy = {...this.state.ioObjects};\n      ioObjects_copy[nodeId].name = newName;\n      this.setState({ioObjects: ioObjects_copy});\n    }\n  }\n\n  getModelData(){\n    return this.state.modelData;\n  }\n\n  saveModelData(updatedNodes, updatedEdges){\n    let newId = this.state.modelData.currId + 1; //edit: id increase no matter what kind of change\n    this.setState({modelData: {currId: newId, nodes:updatedNodes, edges: updatedEdges}});\n    axios.post(hostName + 'saveModelArchitecture/' + this.state.currentArchitecture, {\n      modelData: JSON.stringify({currId: newId, nodes:updatedNodes, edges: updatedEdges}),\n    });\n  }\n\n  // ----------- Model Function (End) ----------\n\n\n  // ========== Train Function (Start) ===========\n\n  getTrainingHistory(){\n    axios.get(hostName + 'listTrainingHistory').then((response, err)=>{\n      let trainingHistory = response.data;\n      trainingHistory.sort((a, b)=>{\n          if (a.datetime < b.datetime) return 1;\n          if (a.datetime > b.datetime) return -1;\n          return 0;\n      })\n      this.setState({trainingHistory: trainingHistory});\n    });\n  }\n\n  setIoDataset(id, datasetName){\n    let ioObjects_copy = {...this.state.ioObjects};\n    ioObjects_copy[id].dataset = datasetName;\n    this.setState({ioObjects: ioObjects_copy});\n  }\n\n\n  onTrainingParamChange(newTrainingParams){\n    this.setState({trainingParams: newTrainingParams});\n  }\n\n  addMetric(newMetric){\n    if (newMetric === 'none') return;\n    if (this.state.trainingParams.metrics.includes(newMetric)) return;\n    let trainingParams_copy = {...this.state.trainingParams};\n    trainingParams_copy.metrics = trainingParams_copy.metrics.concat([newMetric]);\n    this.setState({trainingParams: trainingParams_copy})\n  }\n\n  removeMetric(metricInd){\n    let trainingParams_copy = {...this.state.trainingParams};\n    trainingParams_copy.metrics.splice(metricInd, 1);\n    this.setState({trainingParams: trainingParams_copy});\n  }\n\n  trainModel(){\n    this.setState({training:true});\n    axios.post(hostName + 'trainModel', \n                {data: JSON.stringify({\n                  modelArchitecture: this.state.currentArchitecture, \n                  trainingParams: this.state.trainingParams, \n                  ioObjects: this.state.ioObjects,\n    })}).then((res)=>{\n      this.setState({training:false});\n      if (res.data === 'success'){\n        // alert('finished training !')\n        this.getTrainingHistory();\n      }else{\n        alert(res.data);\n      }\n    }).catch((err)=>{\n      alert('ERROR: ' + err);\n    });\n  }\n\n  removeTrainedModel(nameToRemove){\n    axios.post(hostName + 'deleteTrainedModel/' + nameToRemove).then((res)=>{\n      if (res.data === 'remove success'){\n        this.setState({trainingHistory: this.state.trainingHistory.filter(x => x.name !== nameToRemove)});\n      }\n    }).catch((err) => {\n      alert('remove unsuccessful. \\n' + err)\n    });\n  }\n\n  // ----------- Train Function (End) ----------\n\n\n  render(){\n    console.log('exportTrainedModel', this.exportTrainedModel)\n    \n    return (\n      <div className=\"App\">\n        <HashRouter>\n          <div style={{zIndex: 10, position:'fixed', top:0}}>\n            <TopBar directory={this.state.directory} setDirectory={this.setDirectory}/>\n          </div>\n          <div style={{height:'47px'}}></div>\n          <div className='main'>\n          <Switch style={{zIndex: 3}}>\n\n\n\n            <Route path=\"/dashboard\"\n                    render={ props => <Dashboard rerenderDataAsset={this.getDataAssetList} \n                                                dataObjects={this.state.dataObjects}\n                                                removeDataObject={this.removeDataObject}\n                                                // getId={this.getDataPipelineNodeId}\n                                                // getDataPipelineData={this.getDataPipelineData}\n                                                // saveDataPipelineData={this.saveDataPipelineData}\n                                                // createDataPipelineIoObject={this.createDataPipelineIoObject}\n                                                // createNewDataPipeline={this.createNewDataPipeline}\n                                                // changeCurrDataPipeline={this.changeCurrDataPipeline}\n                                                // deleteCurrDataPipeline={this.deleteCurrDataPipeline}\n                                                // removeDataPipelineIoObjectById={this.removeDataPipelineIoObjectById}\n                                                // renameDataPipelineIoObjectById={this.renameDataPipelineIoObjectById}\n                                                // dataPipelineData={this.state.dataPipelineData}\n                                                // listOfDataPipelines={this.state.listOfDataPipelines} \n                                                // currentDataPipeline={this.state.currentDataPipeline}\n                                                // trainingHistory={this.state.trainingHistory}\n                                                removeTrainedModel={this.removeTrainedModel}\n                                                exportTrainedModel={this.exportTrainedModel}\n\n\n                                                trainingParams={this.state.trainingParams} \n                                                dataObjects={this.state.dataObjects} \n                                                ioObjects={this.state.ioObjects} \n                                                currentArchitecture={this.state.currentArchitecture}\n                                                setIoDataset={this.setIoDataset}\n                                                onTrainingParamChange = {this.onTrainingParamChange} trainModel = {this.trainModel}\n                                                trainingScore={this.state.trainingScore}\n                                                trainingHistory={this.state.trainingHistory}\n                                                training={this.state.training}\n                                                removeTrainedModel={this.removeTrainedModel}\n                                                addMetric = {this.addMetric}\n                                                removeMetric = {this.removeMetric}\n                                                changeCurrArchitecture = {this.changeCurrArchitecture}\n                                                listOfArchitectures = {this.state.listOfArchitectures}\n                                                /> }/>\n            \n            \n            <Route path=\"/model\"\n                    render={ props =><Canvas modelData={this.state.modelData} \n                                              currentArchitecture={this.state.currentArchitecture} \n                                              listOfArchitectures={this.state.listOfArchitectures}\n                                              getId={this.getModelNodeId}\n                                              createNewArchitecture={this.createNewArchitecture}\n                                              changeCurrArchitecture={this.changeCurrArchitecture}\n                                              deleteCurrArchitecture={this.deleteCurrArchitecture}\n                                              saveData={this.saveModelData}\n                                              createIoObject={this.createIoObject}\n                                              removeIoObjectById={this.removeIoObjectById} \n                                              renameIoObjectById={this.renameIoObjectById} /> }/>\n            \n            \n            {/* <Route path=\"/train\"\n                    render={ props => <Train  trainingParams={this.state.trainingParams} \n                    dataObjects={this.state.dataObjects} \n                    ioObjects={this.state.ioObjects} \n                    currentArchitecture={this.state.currentArchitecture}\n                    setIoDataset={this.setIoDataset}\n                    onTrainingParamChange = {this.onTrainingParamChange} trainModel = {this.trainModel}\n                    trainingScore={this.state.trainingScore}\n                    trainingHistory={this.state.trainingHistory}\n                    training={this.state.training}\n                    removeTrainedModel={this.removeTrainedModel}\n                    addMetric = {this.addMetric}\n                    removeMetric = {this.removeMetric}\n                    changeCurrArchitecture = {this.changeCurrArchitecture}\n                    listOfArchitectures = {this.state.listOfArchitectures}\n                    /> }/> */}\n            \n          \n            \n            \n\n\n            <Redirect to='/dashboard' />\n\n\n\n          </Switch>\n          </div>\n        </HashRouter>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}